import pandas as pdimport general as gendef getMapFile(corpus):    corpus = gen.getCorpus(corpus[0])    mapFile = '%s/%s/%sDocMap.txt' % (gen.get_resource_path() , corpus , corpus)    return mapFiledef getAllRetDf (resFile,corpus):    # Calculate input ResFile when b=0 and b=0.5    b = 0    c = 100    df0 = getRetDf (resFile,b,corpus)    df0.rename(columns={'r':'r'+str(b)},inplace=True)    b = 0.5    df5 = getRetDf (resFile,b,corpus)    df5.rename(columns={'r':'r'+str(b)},inplace=True)    df = df0.merge(df5,on='docid')    return dfdef getRetDf (resFile,b,corpus):    docMap = getDocMap(corpus)    resF = open(resFile, 'r', encoding='utf-8')    for line in resF:        # print(line)        parts = line.split()        # qryid = parts[0]        docid = parts[2]        rank = int(parts[3])        r = rank ** -b        docMap[docid] += r    resF.close()    items = docMap.items()    df = pd.DataFrame(items, columns='docid r'.split())    return dfdef getDocMap (corpus):    mapFile = getMapFile(corpus)    f = open(mapFile,'r')    docMap = {}    for line in f:        docid = line.replace('\n','')        docMap[docid] = 0    return docMapdef calculateG(docMap):    # Calculate G - Count of zero r values - rSum    docMap = sorted(docMap.items(), key=lambda x: x[1])    rSum = 0    zeroCtr = 0    numerator = 0    N = len(docMap) + 1    i = 1    for docid , r in docMap :        if (r == 0):            zeroCtr += 1        else:            rSum += r            numerator += (2 * i - N) * r        i += 1    G = numerator / ((N-1) * rSum)    return [G , zeroCtr , rSum]def calculate_author(docMap , corpus ):    authorMap = {}    corpus_file = gen.get_corpus_filename(corpus)    f = open(corpus_file,encoding='utf-8')    parts = f.readline().split(',')    author_index = parts.index('author')    docid_index = parts.index('docid')    for line in f:        parts = line.split(',')        author = parts[author_index]        docid = parts[docid_index]        gen.setVaue(authorMap,author,docMap[docid])    result = calculateG(authorMap)    return resultdef calculate (resFile, b, corpus):    # Output : [g(d), ctr_zero(d), rSum(d) , g(a), ctr_zero(a) , rSum(a)]    docMap = getDocMap(corpus)    resF = open(resFile,'r',encoding='utf-8')    for line in resF:        # print(line)        parts = line.split()        # qryid = parts[0]        docid = parts[2].strip()        rank = int(parts[3])        r = rank ** -b        docMap[docid] += r    resF.close()    result = calculateG(docMap)    # DocMap Author    result2 = calculate_author(docMap,corpus)    result += result2    # List of Strings    result = [str(x) for x in result]    return resultif __name__ == '__main__':    res_file = gen.anserini_root + '/out/exSet/CO-BM25-UI-200K-C100-RM3-fbdocs15-fbterms5-b0.4-beta0.5.res'    result = calculate(res_file,0.5,'c')    print(result)